// импорты
import 'std.io'
import 'std.system'
import 'std.fs'
import 'std.strings'
import 'std.threads'

import 'utils.json'
import 'utils.stream.api'

import 'colors.wt'
import 'utils.wt'
import 'builder.wt'

/*
трэйт команды
*/
trait Cmd {
    fun run(args)
    fun info
    fun params_amount
}

/*
команды
*/
type RunCmd impl Cmd {
    fun run(args) {
        // цвет
        io.print(colors.cyan)
        // проверка на наличие .target папки
        if fs.is_exists(system.cwd().resolve('.target')) {
            delete_target()
        }
        // log
        io.println('compiling...')
        // компиляция .java
        compiled := compile_java()
        // компиляция .joule
        compile_joule(compiled)
        // компиляция .wt
        copy_watt_files()
        // запуск
        run_main()
    }
    fun info {
    }
    fun params_amount {
        return 0
    }
}
type NewCmd impl Cmd {
    fun run(args) {
        // пути для проекта
        project_folder := args.get(0)
        project_path := system.cwd().resolve(project_folder)
        // директории
        fs.create_directory(project_path)
        fs.create_directory(project_path.resolve('.java'))
        fs.create_directory(project_path.resolve('.target'))
        // файлы
        fs.write_text(project_path.resolve('main.wt'), str.unescape(
            'import \"joule.wt\"\n' +
            '\n' +
            'joule:joule()\n' +
            'main := __refl__.reflect(\"joule.Main\", [])\n' +
            'main.print()'
        ))
        fs.write_text(project_path.resolve('config.joule'), json.encode({
            'name': project_path.filename(),
            'main': './main.wt',
            'java': [
                './Main.java'
            ]
        }))
        fs.write_text(project_path.resolve('.java/Main.java'), str.unescape(
            'package joule;\n' +
            'public class Main {\n' +
            '   public void print() {\n' +
            '       System.out.println("Hello, world!");\n' +
            '   }\n' +
            '}'
        ))
    }
    fun info {
    }
    fun params_amount {
        return 1
    }
}

unit cli {
    commands := {
        'run': new RunCmd(),
        'new': new NewCmd()
    }
    fun retrieve_arguments {
        return system.args()
    }
    fun invalid_usage {
        io.print(colors.cyan)
        io.println('Invalid usage. Usages:')
        io.println('........')
        io.println('joule new <folder> :: creates new Watt project.')
        io.println('joule run :: runs current project.')
        io.println('........')
        io.print(colors.reset)
        system.exit(1)
    }
    fun run {
        args := self.retrieve_arguments()
        if args.size() < 1 {
            invalid_usage()
        } else {
            command_name := args.get(0)
            if commands.has_key(command_name) {
                command := commands.get(command_name)
                if command.params_amount() == args.size() - 1 {
                    command.run(new Stream(args).skip(1).get())
                } else {
                    invalid_usage()
                }
            } else {
                invalid_usage()
            }
        }
    }
}