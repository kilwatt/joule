// –∏–º–ø–æ—Ä—Ç—ã
import 'std.io'
import 'std.system'
import 'std.fs'
import 'std.strings'
import 'std.threads'

import 'utils.json'
import 'utils.stream.api'
import 'utils.terminal'

import 'colors.wt'

// —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
fun delete_directory(path) {
    if path.is_directory() {
        for file in path.files().iter() {
            delete_directory(file)
        }
        fs.delete_path(path)
    } else {
        fs.delete_path(path)
    }
}

// —É–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
fun delete_target() {
    cwd_path := system.cwd()
    target_folder := cwd_path.resolve('.target')
    io.println(target_folder + ' is already exists, are you sure you wanna delete it ü§î')
    io.print('[y/n]: ')
    answer := io.input()
    if answer.toLowerCase() == 'y' {
        delete_directory(target_folder)
    } else {
        io.println('cancelled ü§ñ')
        system.exit(2)
    }
}

// –∫–æ–º–ø–∏–ª—è—Ü–∏—è java
fun compile_java {
    // —Å–ª–æ–≤–∞—Ä—å [–¥–∂–∞–≤–∞_—Ñ–∞–π–ª, –∫–ª–∞—Å—Å_—Ñ–∞–π–ª]
    compiled := []
    // –ø—É—Ç–∏
    cwd_path := system.cwd()
    target_folder := cwd_path.resolve('.target')
    java_folder := cwd_path.resolve('.java')
    // –∫–æ–º–ø–∏–ª—è—Ü–∏—è
    for java_file in java_folder.files().iter() {
        class_file := target_folder.resolve('joule').resolve(
            java_file.filename().replace('.java', '.class')
        )
        compiled.add([java_file,class_file])
        _error := __refl__.compile(java_file,target_folder)
        if _error != null {
            io.println('error occured: ')
            io.println(_error)
            system.exit(2)
        }
    }
    return compiled
}

// –∫–æ–º–ø–∏–ª—è—Ü–∏—è joule.wt —Ñ–∞–π–ª–∞
fun compile_joule(compiled) {
    // –ø—É—Ç–∏
    cwd_path := system.cwd()
    target_folder := cwd_path.resolve('.target')
    joule_file := target_folder.resolve('joule.wt')
    // —Ç–µ–∫—Å—Ç
    text := str.unescape('import \"std.fs\"\n\nfun joule {\n')
    // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    for pair in compiled.iter() {
        java_file_name := pair.get(0)
        class_file_name := pair.get(1)
        // —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –∫–ª–∞—Å—Å–∞
        class_name := 'joule.'
        current := class_file_name
        if current.parent().filename() != 'joule' {
            while current.parent().filename() != 'joule' {
                class_name += current.parent().filename() + '.'
                current = current.parent()
            }
        }
        class_name += class_file_name.filename().replace('.class', '')
        // –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—Å—Ç
        text += '   __refl__.define(fs.path_of(\"' + class_file_name + '\"),\"' + class_name + '\")' + str.unescape('\n')
    }
    text += '}'
    // –∑–∞–ø–∏—Å—å
    fs.write_text(joule_file, text)
}

// –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .wt —Ñ–∞–π–ª–æ–≤
fun copy_watt_files {
    // –ø—É—Ç–∏
    cwd_path := system.cwd()
    target_folder := cwd_path.resolve('.target')
    joule_file := target_folder.resolve('joule.wt')
    // –ø–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    files := new Stream(cwd_path.files()).map(lambda(it) -> it.to_string()).get()
    files.delete(cwd_path.resolve('config.joule').to_string())
    files.delete(cwd_path.resolve('.target').to_string())
    files.delete(cwd_path.resolve('.java').to_string())
    files = new Stream(files).map(lambda(it) -> fs.path_of(it)).get()
    // –∫–æ–ø–∏—Ä—É–µ–º
    for file in files.iter() {
        filename := file.filename()
        fs.copy_path(file,target_folder.resolve(filename))
    }
}

fun run_main {
    cwd_path := system.cwd()
    watt_executable := cwd_path.resolve('../.compiler/watt.bat')
    main_file_name :=  json.parse(
        fs.read_text(
            cwd_path.resolve('config.joule')
        )
    ).get('main')
    watt_target := cwd_path.resolve('.target').resolve(main_file_name)
    io.println('running main...' + colors.reset)
    process := system.process([watt_executable.to_string(),watt_target.to_string()], true)
    io.println(colors.green + 'started main, pid: ' + process.pid() + colors.reset)
    io.println('......')
    while process.isAlive() {
        threads.sleep(20)
    }
    io.println('......')
    io.println(colors.green + 'successfuly ended main, pid: ' + process.pid() + colors.reset)
}

/*
—Ç—Ä—ç–π—Ç –∫–æ–º–∞–Ω–¥—ã
*/
trait Cmd {
    fun run(args)
    fun info
    fun params_amount
}

/*
–∫–æ–º–∞–Ω–¥—ã
*/
type RunCmd impl Cmd {
    fun run(args) {
        // —Ü–≤–µ—Ç
        io.print(colors.cyan)
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ .target –ø–∞–ø–∫–∏
        if fs.is_exists(system.cwd().resolve('.target')) {
            delete_target()
        }
        // log
        io.println('compiling...')
        // –∫–æ–º–ø–∏–ª—è—Ü–∏—è .java
        compiled := compile_java()
        // –∫–æ–º–ø–∏–ª—è—Ü–∏—è .joule
        compile_joule(compiled)
        // –∫–æ–º–ø–∏–ª—è—Ü–∏—è .wt
        copy_watt_files()
        // –∑–∞–ø—É—Å–∫
        run_main()
    }
    fun info {
    }
    fun params_amount {
        return 0
    }
}
type NewCmd impl Cmd {
    fun run(args) {
        // –ø—É—Ç–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
        project_folder := args.get(0)
        project_path := system.cwd().resolve(project_folder)
        // –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        fs.create_directory(project_path)
        fs.create_directory(project_path.resolve('.java'))
        fs.create_directory(project_path.resolve('.target'))
        // —Ñ–∞–π–ª—ã
        fs.write_text(project_path.resolve('main.wt'), str.unescape(
            'import \"joule.wt\"\n' +
            '\n' +
            'joule:joule()\n' +
            'main := __refl__.reflect(\"joule.Main\", [])\n' +
            'main.print()'
        ))
        fs.write_text(project_path.resolve('config.joule'), json.encode({
            'name': project_path.filename(),
            'main': './main.wt',
            'java': [
                './Main.java'
            ]
        }))
        fs.write_text(project_path.resolve('.java/Main.java'), str.unescape(
            'package joule;\n' +
            'public class Main {\n' +
            '   public void print() {\n' +
            '       System.out.println("Hello, world!");\n' +
            '   }\n' +
            '}'
        ))
    }
    fun info {
    }
    fun params_amount {
        return 1
    }
}

unit cli {
    commands := {
        'run': new RunCmd(),
        'new': new NewCmd()
    }
    fun retrieve_arguments {
        return system.args()
    }
    fun invalid_usage {
        io.print(colors.cyan)
        io.println('Invalid usage. Usages:')
        io.println('........')
        io.println('joule new <folder> :: creates new Watt project.')
        io.println('joule run :: runs current project.')
        io.println('........')
        io.print(colors.reset)
        system.exit(1)
    }
    fun run {
        args := self.retrieve_arguments()
        if args.size() < 1 {
            invalid_usage()
        } else {
            command_name := args.get(0)
            if commands.has_key(command_name) {
                command := commands.get(command_name)
                if command.params_amount() == args.size() - 1 {
                    command.run(new Stream(args).skip(1).get())
                } else {
                    invalid_usage()
                }
            } else {
                invalid_usage()
            }
        }
    }
}